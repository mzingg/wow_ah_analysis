library("RPostgreSQL", lib.loc="C:/Users/markus/Documents/R/win-library/3.0")
library("zoo", lib.loc="C:/Users/markus/Documents/R/win-library/3.0")
con <- dbConnect(dbDriver("PostgreSQL"), user="wowah", password="wowah", dbname="wowah")
rs <- dbSendQuery(con, "SELECT * FROM import.auction_snapshot")
Data <- fetch(rs, n = 100)
View(Data)
View(Data)
View(Data)
Data$timestamp
as.Date(Data$timestamp)
as.Date.yearqtr(Data$timestamp)
as.Date(Data$timestamp)
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
fix(x)
x$a
x$beta
x$logic
lapply(x, mean)
lapply(x, quantile, probs = 1:3/4)
sapply(x, quantile)
View(Data)
lapply(Data$bid_amount, mean)
lapply(Data, mean)
vapply(Data$bid_amount, mean)
lapply(Data$bid_amount, function(x) { x })
lapply(Data, function(x) { x })
apply(Data, function(x) { x })
apply(Data, FUN = function(x) { x })
apply(Data, FUN = function(x) { x }, MARGIN=Data$bid_amount)
apply(Data, FUN = function(x) { x }, MARGIN=Data)
lapply(Data, function(x) { x })
lapply(as.vector(Data$buyout_amount), function(x) { x })
lapply(Data$buyout_amount, function(x) { x })
lapply(Data$timestamp, function(x) { x })
View(Data)
lapply(c(Data$timestamp, Data$time_left), function(x) { x })
lapply(Data$timestamp, function(x) { x })
lapply(Data, function(x) { x })
apply(Data, 1, function(x) { x })
apply(Data, 1, function(x) { x$time_left })
apply(Data, 2, function(x) { x$time_left })
apply(Data, 1, function(x) { x })
apply(Data, 1, function(x) { x })
install.packages("plyr")
library("plyr", lib.loc="C:/Users/markus/Documents/R/win-library/3.0")
adply(Data, 1, function(x) { x })
adply(Data, 1, function(x) { x$time_left })
alply(Data, 1, function(x) { x$time_left })
alply(Data, 1, function(x) { x$time_left }, .expand = FALSE)
alply(Data, 1, function(x) { x }, .expand = FALSE)
alply(Data, 3, function(x) { x }, .expand = FALSE)
alply(Data, 1, function(x) { x }, .expand = FALSE)
alply(Data, 1, function(x) { x })
alply(Data, 2, function(x) { x })
daply(Data, "time_left")
daply(Data, "time_left", function(x) { x })
daply(Data, 1, function(x) { x })
daply(Data, 1, function(x) { x$time_left })
daply(Data, c(1, 2), function(x) { x$time_left })
daply(Data, 1, function(x) { x$time_left })
daply(Data, .(1), function(x) { x$time_left })
daply(Data, ., function(x) { x$time_left })
daply(Data, .(timestamp), function(x) { x$time_left })
daply(Data, .(Data$timestamp), function(x) { x$time_left })
daply(Data, c(.(Data$snapshot_hash),.(Data$timestamp)), function(x) { x$time_left })
adply(Data, c(.(Data$snapshot_hash),.(Data$timestamp)), function(x) { x$time_left })
daply(Data, c(.(Data$snapshot_hash),.(Data$timestamp)), function(x) { x$time_left })
dlply(Data, c(.(Data$snapshot_hash),.(Data$timestamp)), function(x) { x$time_left })
daply(Data, c(.(Data$snapshot_hash),.(Data$timestamp)), function(x) { x$time_left })
daply(Data, .(Data$snapshot_hash), function(x) { x$time_left })
rm(Data)
Data <- fetch(rs)
Data <- fetch(rs, n = -1)
rm(Data)
Data <- fetch(rs, n = -1)
rm(Data)
rm(rs)
rs <- dbSendQuery(con, "SELECT * FROM import.auction_snapshot")
Data <- fetch(rs, n = -1)
daply(Data, .(Data$snapshot_hash), function(x) { x$time_left })
View(Data)
daply(Data, c(.(Data$auction_id), .(Data$snapshot_hash)), function(x) { x$time_left })
